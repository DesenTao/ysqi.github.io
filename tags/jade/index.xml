<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虞双齐Golang开发与SRE运维</title>
    <link>https://yushuangqi.com/tags/jade.xml</link>
    <description>在 虞双齐Golang开发与SRE运维上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/jade.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>在Beego中使用Jade模板</title>
      <link>https://yushuangqi.com/blog/2016/zai-beegozhong-shi-yong-jademo-ban.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:52 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/zai-beegozhong-shi-yong-jademo-ban.html</guid>
      <description>Jade是一个高性能的HTML模板引擎，它受到Haml的影响,是使用JavaScript实现的。Jade在客户端也有支持，它的代码比html可读性要高很多，Jade是一个比较常用的HTML模板。
Beego是一个go语言的web应用程序开源web框架，而Beego从1.7.0开始支持更加复杂的模板引擎，当然也包括了对于jade的支持，支持更复杂模板引擎的PR地址https://github.com/astaxie/beego/pull/1940。
在介绍Jade的使用之前先来看下Go下面的html/template包。
html/template 在Go语言中，html/template包是一个很强大的html模板包，结合text/template的模板语法，基本上可以满足大部分的HTML模板需求，无论是Beego中是默认支持的两种模板格式.tpl和.html,以及jade和ace都是可以解析为html/template中的Template对象使用，就是说我们所使用的html模板最终都是基于html/template包实现的。
html/template使用实例:
package main import ( &amp;quot;html/template&amp;quot; ) type User struct { Name string } func main() { t := template.New(&amp;quot;template example&amp;quot;) t, _ = t.Parse(&amp;quot;hello {{.Name}}!&amp;quot;) p := User{Name: &amp;quot;jjz&amp;quot;} t.Execute(os.Stdout, p) }  上面的例子会输出字符串：hello jjz。
通过上面的例子我们可以看到，如何新建一个模板，再使用模板函数Parse()从字符串中加载模板内容，使用模板函数Execute()可以给模板替换字段。替换模板字段的语法,{{}}中的字段就是要替换字段,{{. Name}}表示需要替换的字段名称。
Beego使用复杂模板的方式很简单，增加一个模板引擎函数，在项目运行的时候遍历views中的文件，把指定的文件解析为template.Template对象，返回该对象提供使用，这个模板引擎函数就是：`beego.AddTemplateEngine
`。
AddTemplateEngine beego.AddTemplateEngine是一个用来把指定的文件，转换为template.Template的对象的函数。它的第一个参数是文件的后缀名，在views中的含有此后缀名的文件都会进入该方法进行处理。他的第二个参数是一个函数，用来处理文件的转换，最后会返回一个template.Template的对象。有了这个函数，我们还少一个把jade文件解析为template.Template的方法，还好有人已经做了jade的Go语言实现。
jade.go jade.go是Jade的Go语言实现。
jade.go的使用，首先安装jade.go：
 go get github.com/Joker/jade
 jade.go使用示例:
func main() { tpl, err := jade.Parse(&amp;quot;name_of_tpl&amp;quot;, &amp;quot;doctype 5: html: body: p Hello world!</description>
    </item>
    
  </channel>
</rss>