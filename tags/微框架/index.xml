<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>极客虞双齐</title>
    <link>https://yushuangqi.com/tags/%E5%BE%AE%E6%A1%86%E6%9E%B6.xml</link>
    <description>在 极客虞双齐上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/%E5%BE%AE%E6%A1%86%E6%9E%B6.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Goji-基于Go语言的微型web框架</title>
      <link>https://yushuangqi.com/blog/2016/goji---ji-yu--go-yu-yan-de-wei-xing--web-kuang-jia.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:58 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/goji---ji-yu--go-yu-yan-de-wei-xing--web-kuang-jia.html</guid>
      <description>Goji 是一个基于 Go 的微型 web 框架，其设计受到了 Sinatra 的启发。
示例 一个简单的 Hello World 示例
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;github.com/zenazn/goji&amp;quot; &amp;quot;github.com/zenazn/goji/web&amp;quot; ) func hello(c web.C, w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;quot;Hello, %s!&amp;quot;, c.URLParams[&amp;quot;name&amp;quot;]) } func main() { goji.Get(&amp;quot;/hello/:name&amp;quot;, hello) goji.Serve() }  Goji 的代码的 example 目录下包含了一个示例应用
特性  兼容 net/http URL 模式（同时支持 Sinatra 风格的 /foo/:bar 和 正则表达式） 可再配置的中间件栈 自动支持 Einhorn、 systemd 渐进停止，配合 Einhorn 可实现零下线时间的渐进重载 Ruby on Rails / jQuery 风格的参数解析  理念  简单。 Sinatra 风格，而不是 Rails 风格。没有魔法。 可组合的。可与 net/http 组合，可以作为 http.</description>
    </item>
    
    <item>
      <title>GolangWeb框架TinyGoWeb</title>
      <link>https://yushuangqi.com/blog/2016/golang-webkuang-jia--tiny-go-web.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:56 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-webkuang-jia--tiny-go-web.html</guid>
      <description>Tiny Go Web (TGW)是一个非常简单的Web框架，甚至谈不上框架。TGW无意取代任何框架，TGW的诞生是因为作者在使用beego时有种挫败感，决定自己重新写一个适合自己网站用的(私人借书网，因为网站没有完成备案，暂时由托管在US的vps进行反向代理到ucloud主机，访问可能会有一定的延时)，从构思到完成总共只花了一天时间，因为觉得它已经够用了，就没有继续添加新的功能。
项目地址:[](http://github.com/icattlecoder/tgw)http://github.com/icattlecoder/tgw
Qiuck Start &amp;gt; go get github.com/icattlecoder/tgw &amp;gt; cd src/github.com/icattlecoder/tgw/example &amp;gt; go build &amp;gt; ./example  控制器 控制器实现自动路由注册，例如有以下的结构
type Server struct { //成员由业务逻辑而定，如mgo的数据库连接信息等 } func NewServer( /*入参，例如从配置文件中读取*/) *Server { return &amp;amp;Server{} } //对应模板为index.html ,返回值data用于渲染模板 func (s *Server) Index() (data map[string]interface{}) { data = map[string]interface{}{} author := Author{ Name: &amp;quot;icattlecoder&amp;quot;, Email: []string{&amp;quot;icattlecoder@gmail.com&amp;quot;, &amp;quot;iwangming@hotmail.com&amp;quot;}, QQ: &amp;quot;405283013&amp;quot;, Blog: &amp;quot;http://blog.segmentfault.com/icattlecoder&amp;quot;, } data[&amp;quot;author&amp;quot;] = author return } //由于没有json.html模板，但是却有data返回值，此data将以json字符串的格式返回 func (s *Server) Json() (data map[string]interface{}) { data = map[string]interface{}{} author := Author{ Name: &amp;quot;icattlecoder&amp;quot;, Email: []string{&amp;quot;icattlecoder@gmail.</description>
    </item>
    
  </channel>
</rss>