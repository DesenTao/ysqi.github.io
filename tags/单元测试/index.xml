<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虞双齐Golang开发与SRE运维</title>
    <link>https://yushuangqi.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.xml</link>
    <description>在 虞双齐Golang开发与SRE运维上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang单元测试指引</title>
      <link>https://yushuangqi.com/blog/2016/golang-chan-yuan-ce-shi-zhi-yin.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:56 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-chan-yuan-ce-shi-zhi-yin.html</guid>
      <description> Golang 单元测试指引 参考：
 https://justinas.org/my-reaso&amp;hellip;  . 普通单测 testing.T . 单测环境准备和清理 testing.M (set-up/tear-down) . 性能测试 testing.B . 覆盖率 testing.Cover </description>
    </item>
    
    <item>
      <title>编写可测试的Go代码</title>
      <link>https://yushuangqi.com/blog/2016/bian-xie-ke-ce-shi-de-godai-ma.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:51 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/bian-xie-ke-ce-shi-de-godai-ma.html</guid>
      <description>原文链接：http://tabalt.net/blog/golang&amp;hellip;
Golang作为一门标榜工程化的语言，提供了非常简便、实用的编写单元测试的能力。本文通过Golang源码包中的用法，来学习在实际项目中如何编写可测试的Go代码。
第一个测试 “Hello Test!” 首先，在我们$GOPATH/src目录下创建hello目录，作为本文涉及到的所有示例代码的根目录。
然后，新建名为hello.go的文件，定义一个函数hello()，功能是返回一个由若干单词拼接成句子：
package hello func hello() string { words := []string{&amp;quot;hello&amp;quot;, &amp;quot;func&amp;quot;, &amp;quot;in&amp;quot;, &amp;quot;package&amp;quot;, &amp;quot;hello&amp;quot;} wl := len(words) sentence := &amp;quot;&amp;quot; for key, word := range words { sentence += word if key &amp;lt; wl-1 { sentence += &amp;quot; &amp;quot; } else { sentence += &amp;quot;.&amp;quot; } } return sentence }  接着，新建名为hello_test.go的文件，填入如下内容：
package hello import ( &amp;quot;fmt&amp;quot; &amp;quot;testing&amp;quot; ) func TestHello(t *testing.T) { got := hello() expect := &amp;quot;hello func in package hello.</description>
    </item>
    
    <item>
      <title>mockgo程序的新方法</title>
      <link>https://yushuangqi.com/blog/2016/mock-go-cheng-xu-de-xin-fang-fa.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:42 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/mock-go-cheng-xu-de-xin-fang-fa.html</guid>
      <description>一直以来，我都认为在 go 里面 mock 是非常困难的。不像动态语言或者跑在 VM 上的语言，go 要求在开发的时候就给 mock 介入预留空间，不然测试的时候会不得其门而入。开发的时候需要头疼的事情可多了，还要求再考虑下可测试性，真有点强人所难。另外第三方库并不一定给 mock 预留空间，遇到这种情况只能干瞪眼绕路走。很多时候，无法 mock 掉某些带副作用的函数，就不能覆盖掉目标路径。既然测试不到关键的路径，那干脆就不写测试了。结果是，项目里很多 go 代码事实上一直都没有被测试覆盖掉。
但最近我发现了一个库：https://github.com/bouk/monkey
似乎可以跟开头的烦恼永别了？小范围地体验了下，感觉还是挺好用的。
长话短说，monkey 库通过修改内存地址的方式，替换目标函数的实际执行地址，实现（几乎）任意函数的 mock。你可以指定目标函数，然后定义一个匿名函数替换掉它。替换的记录会存在一个全局表里，不需要的时候可以通过它重新恢复原来的目标函数。由于采用的是修改内存地址的黑科技，作者建议千万不要用在测试环境以外的地方。目前仅支持x86架构上的 Linux 和 Mac，Windows 似乎没有测试过？不管怎样，支持 Linux 和 Mac 就足以覆盖开发机和 CI 环境了。
monkey 库用起来非常简单，直接边上示例代码，边解释好了：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;github.com/bouk/monkey&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/exec&amp;quot; &amp;quot;reflect&amp;quot; &amp;quot;testing&amp;quot; ) // 假如我们要测试函数 call func call(cmd string) (int, string) { bytes, err := exec.Command(&amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, cmd).CombinedOutput() output := string(bytes) if err != nil { return 1, reportExecFailed(output) } return 0, output } // 上面的函数会调用它，这个函数一定要mock掉！ func reportExecFailed(msg string) string { os.</description>
    </item>
    
  </channel>
</rss>