<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虞双齐Golang开发</title>
    <link>https://yushuangqi.com/tags/%E7%B4%A2%E5%BC%95.xml</link>
    <description>在 虞双齐Golang开发上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/%E7%B4%A2%E5%BC%95.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>用Golang写一个搜索引擎(0x00)---从零开始</title>
      <link>https://yushuangqi.com/blog/2016/yong-golangxie-yi-ge-sou-suo-yin-qing--0x00----cong-ling-kai-shi.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:50 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/yong-golangxie-yi-ge-sou-suo-yin-qing--0x00----cong-ling-kai-shi.html</guid>
      <description>很早就想写一系列的这样的文章了，之前在一个电商公司做搜索，对搜索引擎有一些认识，来到一个新的创业公司以后非常高兴还有机会继续做这方面的事情，虽然领域已经变了，而且不是做搜索了，但是技术还是那些技术，并且有机会接触到了Go语言，对于一个将近10年C/C++的程序员来说，Go的一些特质让我觉得非常舒服，可参见我之前的这篇文章。
从公司项目衍生出了一个自己的搜索引擎项目，然后有了这篇文章。
先聊聊目标吧，我希望实现一个这样的搜索引擎
 使用Go语言实现，方便部署，最好就用一个二进制文件搞定一些，不需要安装任何依赖。
 类似一个电商的搜索引擎，支持多字段的检索，不仅仅是文本的全文索引，还需要包括过滤功能（比如价格区间过滤），汇总功能（比如结果集中品牌数量汇总），基本的统计功能。
 索引器和搜索器在一起，主要是为了简洁，不用启多个实例。
 支持建立多个索引，并且多个索引如果有主键关联，可以进行多索引的联查（速度就只能呵呵了）。
 对于1000万的文档，单个词的平均查询时间小于10ms。
 对于一台8核8G内存的机器，QPS达到2000。
 尽可能的少用机器内存，在2G的机器上也能进行1000万以上的文档搜索。
 有较强的扩展性，可以自己扩展策略。
 可以进行分布式的集群部署，增加可搜索的文档数量，提高系统的查询吞吐量。
 支持中文分词，但分词不是我们的重点。
 支持相关性排序，但相关性排序也不是我们的重点。
 重要的一点，由于是对搜索引擎的一个全面实现，尽量不用开源的代码，所有算法和数据结构都自己实现，当然，也可以方便的进行开源替代。
  当然，一个搜索引擎涉及的部分实在是太多了，下面几个部分不是我们的重点，也不会进行深入的实现
 没有爬虫部分，搜索引擎的爬虫又是一个另外的话题了，也可以写一个很复杂的系统出来，所以我们这里不涉及爬虫的部分
 不涉及算法的部分，所谓算法部分就是排序算法，各种相关度计算，这也是一个另外的话题了，等这一系列文章结束以后再来说说排序的算法，目前仅仅有的是按照TF*IDF进行基本的相关性的基本排序
 不涉及分词部分，分词部分也是一个单独的话题，直接实现了一个非常非常非常（重要事情说三遍）简单的中文分词器（一个函数），可以用就行了。
  目前代码部分已经完成了一大半了，但是还没有进行优化，并且最后一个分布式引擎还没有完成。但是代码的核心部分，也就是搜索引擎本身的技术部分已经完成了，也已经在github上托管了，所以这一系列文章出现不更新的情况也不太可能，毕竟代码已经基本完成了。
好了，下面我们开始吧，整个系列文章将分成以下几个部分来进行描述
 一个单机的搜索引擎的架构，包括搜索引擎的模块组成，各个模块的功能已经他们之间的关系，这个部分会对搜索引擎整体有个了解，方便后面的文章的详细描述，这一部分可能会比较短，后面到第三部分会再详细说。
 搜索引擎的底层技术部分，这部分比较多的内容，会分开一个一个的讲，包括倒排索引技术，正排索引技术，分词算法，MMAP技术，这些是构成一个搜索引擎必要的底层技术，会在这一部分做介绍
 一步一步的实现一个单机的搜索引擎，按照模块从最底层的倒排和正排索引实现一直到最上层的引擎部分的实现，这一部分如果涉及到了相应的数据结构和算法也会单独写，比如哈希表算法，B+TREE算法，BitMap算法，有些我这个引擎中没有实现的算法也会一起讲讲，比如跳表，前缀树，布隆过滤器等等。
 分布式部分【TODO：需要等我代码写完了才行】，包括如何进行分布式，各个机器之间如果进行同步，索引如果进行分片
  代码已经在git上开源了，我会本周再整理一下就公布出来，目前就一堆代码实在没办法看。
好了，算是开了一个头了，文章的更新频率会在一周3到5篇左右吧，欢迎大家扫描一下下面的微信公众号订阅，首先会在这里发出来：）</description>
    </item>
    
    <item>
      <title>用Golang写一个搜索引擎(0x01)---基本概念</title>
      <link>https://yushuangqi.com/blog/2016/yong-golangxie-yi-ge-sou-suo-yin-qing-0x01----ji-ben-gai-nian.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:50 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/yong-golangxie-yi-ge-sou-suo-yin-qing-0x01----ji-ben-gai-nian.html</guid>
      <description>从零开始，写一个搜索引擎 （0x01） 第零部分我们已经列了一个提纲了，这一篇文章开始要详细说说了。
搜索引擎基本概念 在说搜索引擎架构分层之前，我们先确定几个搜索引擎的概念。
 文档，搜索引擎的基本数据单元，比如一张网页，一个商品，多个文档合在一起就是一个搜索引擎的完整数据
 倒排索引，正排索引，存储在搜索引擎内部的数据结构，也是搜索引擎最底层的数据结构。
 索引器，将文档数据生成可供搜索的倒排索引和正排索引的程序就是索引器。
 检索器，通过对倒排索引和正排索引进行查找，从而查找到文档的程序。
 字段，每个文档可能有多个字段，比如一篇文章有标题，作者，摘要，详情，发布时间的，这些东西虽然在一个文档中，但是搜索的时候需要区别对待。
 索引，多个文档通过索引器生成了一堆倒排正排索引，我们把这些倒排正排索引的集合叫索引，如果后面提到索引就是指正排和倒排索引的集合，索引也可以理解为数据库中的表。
  好了，上面就是搜索引擎的最基本的概念，搜索引擎简单的说分成两部分，一部分就是索引器把文档变成倒排和正排文件，第二部分就是检索器通过倒排和正排文件还原文档的过程。
搜索引擎设计分层 数据库其实也是一个搜索引擎，只是数据库和搜索引擎的侧重点不太一样，搜索引擎追求的是简单，速度快，而数据库追求的是稳定和复杂逻辑对数据的处理，所以应用场景不太一样。
既然知道了一个搜索引擎的基本概念，应该怎么来设计这个搜索引擎呢？
按照一般的软件设计逻辑，如果不是非常复杂的系统，要设计一个系统，首先要设计数据结构，然后把数据结构封装到各个算法和类中，然后将各个类组合起来就完成了，所以，我设计这个引擎，是基于以下几个层次来的。
 首先需要一个底层的数据层，用来存储倒排索引和正排索引，每个字段都会建立相应的倒排和正排索引，这一部分应该有一系列相关的模块来实现；
 所有字段的倒排索引和正排索引合起来就是整个数据文件，然后需要一些模块来对这些东西进行管理；
 然后由于在第一篇文章中我们说了希望索引器和检索器都在这里，类似ElasticSearch的实现，所以也使用了分段的方式管理文档的索引，每到一定的条件下将索引刷新到磁盘或者将索引合并起来。
 我们还需要一个引擎的东西来管理多个索引，引擎负责复杂的查询策略和排序策略，这个引擎是可以更换和修改了，只需要实现标准接口就行，也可以自己实现来替换默认的引擎达到更多的功能，甚至你能自己写一个引擎，实现SQL查询。
 最后还需要一个和外界交互的层，我实现的是一个http服务器来和外部交互，交互的数据通过json来进行，这一层也可以重写成任何你需要的样子。
  按照上面这些个模块，一个搜索引擎，在整体架构上大约分成以下几个层次
 首先，最底层的是数据模块层，负责引擎内所有的数据描述，对于搜索引擎来说，数据分为倒排索引和正排索引，也叫逆向索引和正向索引，为了方便，我们这统一叫倒排索引和正排索引。
 在这一层之上是字段层，每一个字段对应了一个正排索引和一个倒排索引（可选），因为有些字段只需要展示出来而不需要进行搜索是不需要倒排的。
 在字段层之前有个段的层来对这些字段进行管理，段有的在内存中，有的刷新到磁盘上了。
 段层之上就是索引模块层了，这一层对上提供一些基本的增加，删除，修改，查找的接口。
 索引模块层之上是引擎层，这一层实现具体的业务查找逻辑。
 最上面是一个网络层，负责和外界进行交互。
  在实现的时候，为了尽量简单，每个模块基本上都是一个文件来实现的，用了Golang以后，代码写起来也自由起来了，只要清晰就行，所以整个引擎下来，代码量其实不是很大。
下面这个图就是整个代码的大框架图，后面我们会一个一个的来讲这些东西。
通过这一篇文章，希望能对搜索引擎有个初步的了解了，后面我会一个一个模块一个一个技术点的来拆分一下这个搜索引擎。
接下来的文章会开始介绍搜索引擎的底层技术了，倒排索引【会花比较多精力来说倒排索引，毕竟这是核心的核心】，正排索引【这个简单，就是数组】，在介绍的时候会有几篇文章介绍实现倒排索引技术需要的一些算法和数据结构。
代码托管在github上，地址是https://github.com/wyh267/FalconEngine，代码还在不断更新中，目前代码量，去掉单元测试文件，大约是6000行，因为是想到哪写到哪，有些函数也没有用，所以还有优化空间，也希望大家提交你的patch，后面讲的时候可以对照代码看看。
代码结构如下，再说一遍，代码量不大，结构也非常简单，虽然我写的代码注释不多，但是没有使用任何高级功能，闭包都没有，直接看没任何难度。
文章的更新频率会在一周3到5篇左右吧，欢迎大家扫描一下下面的微信公众号订阅，首先会在这里发出来：）</description>
    </item>
    
  </channel>
</rss>