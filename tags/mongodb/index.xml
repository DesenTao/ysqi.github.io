<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虞双齐Golang开发与SRE运维</title>
    <link>https://yushuangqi.com/tags/mongodb.xml</link>
    <description>在 虞双齐Golang开发与SRE运维上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/mongodb.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golangmgo驱动指定Mongo服务器读取</title>
      <link>https://yushuangqi.com/blog/2016/golang-mgoqu-dong-zhi-ding-mongofu-wu-qi-dou-qu.html</link>
      <pubDate>Sat, 31 Dec 2016 11:35:01 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-mgoqu-dong-zhi-ding-mongofu-wu-qi-dou-qu.html</guid>
      <description>Replica Sets搭建 服务器采用Replica Sets搭建，可参考Deploy a Replica Set
读模式 Mongod的读模式共有五种：
 primary. 在主节点上进行所有的读操作 primaryPreferred. 优先在主节点上进行读操作，如果主节点不可用，再从从节点操作。 secondary.所有的读操作在从节点上进行。 secondaryPreferred.优先在从节点进行读操作，如果所有从节点都不可用，再从主节点操作。 nearest. 根据网络延迟时间 ，就近进行读操作，不考虑节点类型。  配置节点Tags Sets Tag sets 允许指定一个replica set进行读操作，其中Mongod的读模式必须是以下四种之一：
primaryPreferred、secondary、secondaryPreferred、nearest
Tags Sets配置参考：Configure Replica Set Tag Sets
主要操作如下：
conf = rs.conf() conf.members[0].tags = { &amp;quot;dc&amp;quot;: &amp;quot;east&amp;quot;, &amp;quot;use&amp;quot;: &amp;quot;production&amp;quot; } conf.members[1].tags = { &amp;quot;dc&amp;quot;: &amp;quot;east&amp;quot;, &amp;quot;use&amp;quot;: &amp;quot;reporting&amp;quot; } conf.members[2].tags = { &amp;quot;use&amp;quot;: &amp;quot;production&amp;quot; } rs.reconfig(conf)  mgo代码示例 根据以上的配置，如果需要指定从members 1中进行数据库读操作，可采取以下代码：
session, err := mgo.Dial(&amp;quot;localhost&amp;quot;) if err !</description>
    </item>
    
    <item>
      <title>golang--mgo解析各种数据类型分析</title>
      <link>https://yushuangqi.com/blog/2016/golang----mgojie-xi-ge-chong-shu-ju-lei-xing-fen-xi.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:45 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang----mgojie-xi-ge-chong-shu-ju-lei-xing-fen-xi.html</guid>
      <description>https://segmentfault.com/a/
package main import ( &amp;quot;gopkg.in/mgo.v2&amp;quot; &amp;quot;log&amp;quot; &amp;quot;reflect&amp;quot; ) func main() { session, err := mgo.Dial(&amp;quot;usr:pwd@127.0.0.1:27017/dbname&amp;quot;) if err != nil { log.Fatal(&amp;quot;无法打开MongoDB！&amp;quot;) return } defer session.Close() clt := session.DB(&amp;quot;mydb&amp;quot;).C(&amp;quot;userinfo&amp;quot;) type row struct { UserName, Telephone string } var _row, _row2 interface{} // _row和_row2 都是interface，也就是说它们可以指向任意类型，此时是指向row结构的指针 _row = new(row) _row2 = new(row) // _row3 是具体struct _row3 := row{} log.Printf(&amp;quot;type of &amp;amp;row: %v\n&amp;quot;, reflect.TypeOf(&amp;amp;_row)) log.Printf(&amp;quot;type of row: %v\n&amp;quot;, reflect.TypeOf(_row2)) log.Printf(&amp;quot;type of &amp;amp;row3: %v\n&amp;quot;, reflect.</description>
    </item>
    
    <item>
      <title>利用mongo的findAndModify原子性操作实现autoincrementID</title>
      <link>https://yushuangqi.com/blog/2016/li-yong-mongode-findandmodifyyuan-zi-xing-cao-zuo-shi-xian-auto-increment-id.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:44 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/li-yong-mongode-findandmodifyyuan-zi-xing-cao-zuo-shi-xian-auto-increment-id.html</guid>
      <description>https://segmentfault.com/a/
实际情况 默认情况下，mongo使用_id自动生成uniq id，而且在mongo自带的命令里，无法指定一个自增字段。自增字段在多线程时必须是原子性的，这在大数据情况下很难实现伸缩性(scalability)。
 Generally in MongoDB, you would not use an auto-increment pattern for
the _id field, or any field, because it does not scale for databases
with large numbers of documents. Typically the default value ObjectId
is more ideal for the _id.
 不过好消息是，_id不一定非得是ObjectId类型，它可以是任何类型。而且，在mongo里面，有一个findAndModify命令是原子性的。我们可以使用它实现auto increment ID。
在golang的mgo库里，Apply命令可以实现findAndModify功能
具体策略和代码 策略 假设我们要把test表的_id字段设置为自增的，我们需要先创建一个counter表，这个表里面保存一个seq字段，通过在seq上使用Apply，获取新doc的seq值作为test表中下一个id的值。
代码如下： package main import ( &amp;quot;fmt&amp;quot; &amp;quot;gopkg.in/mgo.v2&amp;quot; &amp;quot;gopkg.in/mgo.v2/bson&amp;quot; &amp;quot;log&amp;quot; &amp;quot;math/rand&amp;quot; &amp;quot;sync&amp;quot; ) func init() { log.SetFlags(log.Lshortfile | log.</description>
    </item>
    
  </channel>
</rss>