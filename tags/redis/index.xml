<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虞双齐Golang开发</title>
    <link>https://yushuangqi.com/tags/redis.xml</link>
    <description>在 虞双齐Golang开发上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/redis.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go操作Redis</title>
      <link>https://yushuangqi.com/blog/2016/gocao-zuo-redis.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:10 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/gocao-zuo-redis.html</guid>
      <description>https://segmentfault.com/a/
Start 在SF文章中，关于PHP，python操作redis的文章已经很多了。可是少了go对redis的操作。最近也是刚开始学Go,由于对redis的偏爱，也顺便学习了一下，并总结下来。
Go-Redis包管理  很明显，我们Go是没有这个包的，那么我们可以利用GO的命令。首先我们得先配置GOPATH的路径，我选择的是/data/go/goSource作为我包的路径，所以shell执行如下  export GOPATH=/data/go/goSource
 go get github.com/alphazero/Go-Redis这样就载下了Go-Redis包了  代码验证  确认redis服务已经开启
 redis.conf注意bind ip 确认可以被连接
 code
  package main import ( &amp;quot;fmt&amp;quot; &amp;quot;github.com/alphazero/Go-Redis&amp;quot; ) func main() { //DefaultSpec()创建一个连接 //选择host,若需要auth,则password填写 //spec := redis.DefaultSpec().Host(&amp;quot;192.168.1.111&amp;quot;).Db(0).Password(&amp;quot;&amp;quot;); //若连接的本机redis-server,则host可以省略 spec := redis.DefaultSpec().Db(0).Password(&amp;quot;&amp;quot;); client, err := redis.NewSynchClientWithSpec (spec); if err != nil { fmt.Println(&amp;quot;Connect redis server fail&amp;quot;); return } dbkey := &amp;quot;test&amp;quot;; value :=[]byte(&amp;quot;Hello world!&amp;quot;); client.Set(dbkey, value); getValue ,err:= client.</description>
    </item>
    
    <item>
      <title>统一配置管理工具confd</title>
      <link>https://yushuangqi.com/blog/2016/tong-yi-pei-zhi-guan-li-gong-ju-confd.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:09 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/tong-yi-pei-zhi-guan-li-gong-ju-confd.html</guid>
      <description>confd Github: https://github.com/sumory/confd
confd是一个统一配置管理工具，目前仍在开发中，基于本地文件存储的部署方式已经可以用于生产环境中。
你可以用它：
 统一管理各种配置文件，配置文件模板和数据是分离的，可各自单独管理
 动态修改配置属性，然后重新生成相关的配置文件
 提供cli方式修改数据
  Features  [x] 基础解析：配置文件使用toml格式，模板数据分离
 [x] 多种存储支持：local file、redis、zookeeper
 [x] 两种运行模式：Debug或Daemon
 [x] cli工具：修改store，批量更新配置
 [ ] 更友好的交互方式，比如通过web界面
 [ ] 分离server和client，提供客户端cli或API供拉取指定配置
 [ ] 加密支持：store中存储的配置可加密，防止泄露
  Usage 安装
#假设安装路径为/data/server/confd #go get获取依赖的第三方库 sh build.sh linux /data/server/confd #执行以上构建脚本后，在docs目录下生成了安装所需的文件 #若build.sh增加了参数$2，则默认加载$2/data/config.toml作为confd运行所需的配置文件 cd docs sh install.sh /data/server/confd cd /data/server/confd #注意修改${path}/data/config.toml里的ConfDir和ConnectAddr，前缀为/data/server/confd #然后使用confd、confd-cli即可  使用
. ├── confd ├── confd-cli ├── data │ ├── config.</description>
    </item>
    
    <item>
      <title>Golangredis操作初体验</title>
      <link>https://yushuangqi.com/blog/2016/golang-redis-cao-zuo-chu-ti-yan.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:01 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golang-redis-cao-zuo-chu-ti-yan.html</guid>
      <description>安装 我使用的是 https://github.com/go-redis/r&amp;hellip; 这个 golang 客户端, 因此安装方式如下:
go get gopkg.in/redis.v4  接着在代码中导入此包即可:
import &amp;quot;gopkg.in/redis.v4&amp;quot;  基本操作 创建客户端 通过 redis.NewClient 函数即可创建一个 redis 客户端, 这个方法接收一个 redis.Options 对象参数, 通过这个参数, 我们可以配置 redis 相关的属性, 例如 redis 服务器地址, 数据库名, 数据库密码等.
下面是一个连接的例子:
// 创建 redis 客户端 func createClient() *redis.Client { client := redis.NewClient(&amp;amp;redis.Options{ Addr: &amp;quot;localhost:6379&amp;quot;, Password: &amp;quot;&amp;quot;, DB: 0, }) // 通过 cient.Ping() 来检查是否成功连接到了 redis 服务器 pong, err := client.Ping().Result() fmt.Println(pong, err) return client }  String 操作 redis 的 String 操作有:</description>
    </item>
    
    <item>
      <title>如何进行计数场景的优化</title>
      <link>https://yushuangqi.com/blog/2015/youhua-jishu-in-db.html</link>
      <pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2015/youhua-jishu-in-db.html</guid>
      <description>社交网络信息爆发，如何衡量你在社交舆论上的影响力？计数！
计数是应用最方便、简单实现的数据挖掘应用，拿Facebook举例，你的Feed被评论多少次，转发多少次，赞多少次，被浏览多少次，你有多少个好友等等。可以说计数得多少的价值可能超过你本身或者你发布的内容本身。
今天着重介绍下Redis在计数器场景上的应用。 对于计数器大家肯定还有或多或少的疑问。
Q1:计数从哪里来？ 通常我们发布的社交内容会存储在数据库中，最常见的如MySQL：
更新索引：
insert into user_message(uid,messageid) values(‘xx’，’xx’)  更新内容：
insert into message_2013_05(messageid,message) values(‘xx’,’xx’);  为什么要进行索引和内容区分我这里就不多熬述了，这时要计算我有发送了多少个message，再mysql库中select count(messageid) where uid=xxx 就可以获得我们想要得计数，也就说大多数情况它源于我们的索引数据。
Q2:计数和其他数据相比有什么特点？  单key读写频繁，总体读取量我们认为可能比内容模块还要频繁，索引的增删改查都会导致计数器的频繁增减。尤其当某篇twitter,feed,weibo非常火爆时，单key的更新将更加火爆。
 需要持久化，所有用户都可能需啊知道自己的计数，这个数据和内容本身一样重要。
  从上面这两个需求来看选用Redis就是水到渠成了，而应对hotkey从Mysql update count+1 &amp;amp; Memcache 替换成Redis incr更是优雅很多。减少了很多数据一致性的风险。
优化的思路： 单独维护计数，从获取更新复杂度O(n)到O(1) 我们知道随着单个uid-&amp;gt;message的个数越来越多，而count(message_id)的逻辑复杂度是O(n)，获取这个计数的成本是越来越大。
如何让其获取变为O(1)？其实很简单，我们只要单独维护一下这个计数就可以了。举一个简单的例子来说明：
假设我们有个字段，我们需要频繁的获取和更新这个字段的长度，引用Redisbook(http://www.redisbook.com/)中的一段对于redis 用于存储key value的sds的描述好像能简单的叙述这件事情。
“比如说， hello world 在 C 语言中就可以表示为 &amp;ldquo;hello world\0&amp;rdquo; 。
这种简单的字符串表示在大多数情况下都能满足要求，但是，它并不能高效地支持长度计算和追加（append）这两种操作：
每次计算字符串长度（strlen(s)）的复杂度为 θ(N) 。 对字符串进行 N 次追加，必定需要对字符串进行 N 次内存重分配（realloc）。
struct sdshdr { len = 11; free = 0; buf = “hello world\0″; // buf 的实际长度为 len + 1 };  通过 len 属性， sdshdr 可以实现复杂度为 θ(1) 的长度计算操作。</description>
    </item>
    
    <item>
      <title>Mac下安装Redis用于开发测试</title>
      <link>https://yushuangqi.com/blog/2015/install-redis-in-mac.html</link>
      <pubDate>Sat, 15 Aug 2015 09:12:01 +0000</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2015/install-redis-in-mac.html</guid>
      <description>Redis作为NB的No-SQL数据，向往已久，现在在做一个网站，计数类的需求比较大，所以准使用Redis实现。下面记录下虞双齐在Mac下开发程序使用Redis的安装过程。
下载Redis安装包 上一篇文章我说了如何在Mac下快速安装Wget，因此下载Redis安装包就可以利用wget命令了。
 首先到下载列表看看最新的版本是什么  国内快速的查看Redis地址： http://www.redis.cn/download.html
我现在使用的最新版本是3.0.3
 下载安装包  cd /tmp wget http://download.redis.io/releases/redis-3.0.3.tar.gz  解压Redis安装包 tar -zxf redis-3.0.3.tar.gz  进入目录执行安装命令 cd redis-3.0.3 #编译 make #安装 sudo make install  检查是否已在Mac下成功安装Redis redis-server -v  输出版本信息
Redis server v=3.0.3 sha=00000000:0 malloc=libc bits=64 build=abcd09569d8d24f9  到此已在Mac下安装Redis ，下一遍告诉大家如何让Redis后台自动运行。</description>
    </item>
    
  </channel>
</rss>