<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on 虞双齐的博客</title>
    <link>https://yushuangqi.com/tags/%E7%AC%94%E8%AE%B0.html</link>
    <description>在 虞双齐的博客上关于in 笔记 的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>ysqi@yushuangqi.com (虞双齐)</managingEditor>
    <webMaster>ysqi@yushuangqi.com (虞双齐)</webMaster>
    <lastBuildDate>Sun, 25 Jun 2017 20:12:27 +0800</lastBuildDate>
    <atom:link href="/tags/%E7%AC%94%E8%AE%B0.html" rel="self" type="application/rss+xml" />
    
    <item>
      <title>终于找到我要的读书方法了</title>
      <link>https://yushuangqi.com/blog/2017/find-the-best-way-to-read-book-for-me.html.html</link>
      <pubDate>Sun, 25 Jun 2017 20:12:27 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2017/find-the-best-way-to-read-book-for-me.html.html</guid>
      <description>自认爱好读书，纸质书，电子书堆积成山。但一直困扰我的是：未能高效Get到知识。
曾遭遇的困惑  买过很多不需要的书，在角落里干灰。 我好像读过这本书。 一口气读完一本书，就没有然后了。  现在买书很克制，不读完并吸收掌握就不继续买。先放到购物车或购书清单中，反正电商的图书活动不断，不怕下次没法优惠购。
如果你有同感请继续看，否则请打道回府，欢迎下次光临🙈。
新招式破解困局 我在《如何有效阅读一本书》中找到了良药：用笔记本管理读书生活 &amp;gt; 一次偶然的机会，在西西弗购物公园店看书时，拿到本日本作家奥野宣之著的《如何有效阅读一本书》。当时看得入迷，时间紧迫。当晚京东下单，接着感受其中的方法论。 &amp;gt; 豆瓣书评传送门：http://t.cn/RJLVnDL 此法乃大简之道，力荐给爱好读书的你。 原始，简单，有效！前后细读两次，越发认为通过笔记管理读书生活有趣而实用。
笔记本 高中时一开学，得买好几个高大上的笔记本。每门各一本，然后在封面写上XX课笔记本虞双齐。好傻包的行为😂。搞得最后是，一上课就找笔记本，期末还每个笔记本一大半纸是空白的&amp;hellip;.
直到现在，也经常给各中东西细分类，没过多久就一团乱有得收拾。其实将东西放在一个筐下也是非常不错的，实际中大部分东西都是大半年用不上。与其分类细放，还不如一个纸箱子全部堆放。自然而然，经常用的东西在最上面。
东西细分类，是在添加心智负担 关于生活、工作、随想、心情都可以通通按时间顺序写到一个普通笔记本上。
字迹潦草无所谓，只要自己能看懂就好，别人才没时间看~~~
用一个普通的笔记本开始我崭新的学习之旅，之前用用过MyBase，Evernote、有道云笔记、为知笔记。在电脑上始终没法体验原始笔记本书写。更何况，我🐢般的打字速度，要命勒，要命勒！！ 所以现在回归到原始，结合为知笔记软件，重新管理我的知识。
功夫不负有心人 耳濡墨染的一个真理，假设一篇文章抄在笔记本上需要花三十分钟时间。而用智能手机拍成照片或扫描成纯文字文档却只要一分钟，想抄写的文字就能永久地保存下来。
那么，只要使用智能手机，读书效率就能提高三十倍吗？ 我想不是的。
即使你使用手机拍照，花三十分钟保存了三十本书的信息，也不如花三十分钟抄写一本书的内容有效。无论在手机里面保存了多少本书，书里面的内容都不会被保存在脑子里。这些内容既不能融入你的身心，也不能变成你无形的财富，与此相反，尽管抄完本也不一定能记住全部内容，但某段文章、某个词、作者的语气和思想等等，都会随着抄写时的身体感觉被深深地刻印在头脑和身体里。
就笔记本抄写文章内容，写感悟，记心情等都是简单有效快捷的方法。当做练字也好，请拾起笔，随便找一个干净的笔记本开始写笔记！ 结尾 一脑的想法，可提笔记录时，却难以下笔。需整理思路，如同和别人对话，得组织语言逻辑。才能让其听明白你所表达的意思。纵有千万灵感，只有用文字记录，让思想书面化，让灵感脱离之前的抽象状态，会更容易将其理解消化，也能促使你把灵感用作创意材料，想用的时候就能信手拈来。
我喜欢将知识，思想形成文字分享给他人。特别是工作内容，只有书面化，才能让自己理清思路完善知识，传播价值。
用笔记管理读书生活是值得一试的读书方法，我已服此良药，你会行动嘛？三个月后呢？</description>
    </item>
    
    <item>
      <title>老虞学Golang-控制语句</title>
      <link>https://yushuangqi.com/blog/2013/ysqi-golang-if-for-select-switch.html.html</link>
      <pubDate>Mon, 08 Apr 2013 23:31:47 +0000</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2013/ysqi-golang-if-for-select-switch.html.html</guid>
      <description>Go中的控制语句较精简，仅有if、for、select和switch。但使用时均比较灵活
if 在Go中条件语句*if*中如果条件部分的计算结果为true时将执行语句块，否则则执行else语句块(如果存在else时)，此逻辑和其他语言中的if一样，但是在Go中还是有一些不同之处。
 if条件表达式不能使用花括号()包含 if语句代码段必须使用{}，并且左括号必须和if在同一行 if条件表达式的前面可以包含初始化语句，支持平行赋值，但不支持多个赋值语句  赋值+条件判断
if a, b := 21, 3; a &amp;gt; b { fmt.Println(&amp;#34;a&amp;gt;b ? true&amp;#34;) } 在if条件表达式前面声明的的变量只能在if-else语句块中使用。
if a, b := 21, 31; a &amp;gt; b { fmt.Println(&amp;#34;a&amp;gt;b ? true&amp;#34;) }else { fmt.Println(a,b) //Ok 	} fmt.Println(a,b) //error: undefined a ,undefined b 还需要注意的是如果在if-else 中包含return 时，编译器无法解析出else中的retrun,导致方法缺少return ,目前1.1版本已支持该方式。
func getName(id int) string { if id == 1 { return &amp;#34;YourName&amp;#34; }else { return &amp;#34;MyName&amp;#34; } //panic(&amp;#34;&amp;#34;) 	} 此代码编译不通过，错误信息：function ends without a return statement，这是在设计Go时故意这样的,也可以说是一个Bug（可参见:https://code.</description>
    </item>
    
    <item>
      <title>老虞学Golang-函数上</title>
      <link>https://yushuangqi.com/blog/2013/ysqi-golang-function-1.html.html</link>
      <pubDate>Sun, 07 Apr 2013 00:00:00 +0000</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2013/ysqi-golang-function-1.html.html</guid>
      <description>不可或缺的函数，在Go中定义函数的方式如下：
func (p myType ) funcName ( a, b int , c string ) ( r , s int ) { return } 通过函数定义，我们可以看到Go中函数和其他语言中的共性和特性
共性  关键字——func 方法名——funcName 入参——— a,b int,b string 返回值—— r,s int 函数体—— {}  特性 Go中函数的特性是非常酷的，给我们带来不一样的编程体验。
为特定类型定义函数，即为类型对象定义方法 在Go中通过给函数标明所属类型，来给该类型定义方法，上面的 p myType 即表示给myType声明了一个方法， p myType 不是必须的。如果没有，则纯粹是一个函数，通过包名称访问。packageName.funcationName
如：
//定义新的类型double，主要目的是给float64类型扩充方法 	type double float64 //判断a是否等于b 	func (a double) IsEqual(b double) bool { var r = a - b if r == 0.</description>
    </item>
    
    <item>
      <title>老虞学golang-字符串</title>
      <link>https://yushuangqi.com/blog/2013/ysqi-golang-string.html.html</link>
      <pubDate>Sat, 06 Apr 2013 00:00:00 +0000</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2013/ysqi-golang-string.html.html</guid>
      <description>在所有编程语言中都涉及到大量的字符串操作，可见熟悉对字符串的操作是何等重要。 Go中的字符串和C#中的一样，字符串内容在初始化后不可修改。 需要注意的是在Go中字符串是有UTF-8编码的，请注意保存文件时将文件编码格式改成UTF-8(特别是在windows下)。
 初始化 var str string //声明一个字符串  str = &amp;#34;laoYu&amp;#34; //赋值  ch :=str[0] //获取第一个字符  len :=len(str) //字符串的长度,len是内置函数 ,len=5 字符串操作  编码过程中避免不了中文字符，那我们该如何提取一个中文呢？首先我们要知道string[index]获取的是字符byte,就无法像C#中&amp;quot;老虞&amp;quot;[0]来取到‘老’，在Go中需要将字符串转换成rune数组，runne数组中就可以通过数组下标获取一个汉字所标识的Unicode码，再将Unicode码按创建成字符串即可。
 查看示例代码
str :=&amp;#34;laoYu老虞&amp;#34; for i:=0;i&amp;lt;len(str);i++ { fmt.Println(str[i]) } for i,s := range str { fmt.Println(i,&amp;#34;Unicode(&amp;#34;,s,&amp;#34;) string=&amp;#34;,string(s)) } r := []rune(str) fmt.Println(&amp;#34;rune=&amp;#34;,r) for i:=0;i&amp;lt;len(r) ; i++ { fmt.Println(&amp;#34;r[&amp;#34;,i,&amp;#34;]=&amp;#34;,r[i],&amp;#34;string=&amp;#34;,string(r[i])) } Outut： 108 97 111 89 117 232 128 129 232 153 158 0 Unicode( 108 ) string= l 1 Unicode( 97 ) string= a 2 Unicode( 111 ) string= o 3 Unicode( 89 ) string= Y 4 Unicode( 117 ) string= u 5 Unicode( 32769 ) string= 老 8 Unicode( 34398 ) string= 虞 rune= [108 97 111 89 117 32769 34398] r[ 0 ]= 108 string= l r[ 1 ]= 97 string= a r[ 2 ]= 111 string= o r[ 3 ]= 89 string= Y r[ 4 ]= 117 string= u r[ 5 ]= 32769 string= 老 r[ 6 ]= 34398 string= 虞 对字符串的操作非常重要，来了解下strings包中提供了哪些函数 获取总字节数 func Len(v type) int</description>
    </item>
    
    <item>
      <title>老虞学Golang-常量</title>
      <link>https://yushuangqi.com/blog/2013/ysqi-golang-const.html.html</link>
      <pubDate>Fri, 05 Apr 2013 23:31:47 +0000</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2013/ysqi-golang-const.html.html</guid>
      <description>###常量
常量和C#中的概念相同，在编译期被创建。因为在编译期必须确定其值，因此在声明常量时有一些限制。
 其类型必须是：数值、字符串、布尔值 表达式必须是在编译期可计算的 声明常量的同时必须进行初始化，其值不可再次修改  ####Doc
http://golang.org/doc/go_spec.html#Constants http://golang.org/doc/go_spec.html#Constant_expressions http://golang.org/doc/go_spec.html#Constant_declarations http://golang.org//doc/go_spec.html#Iota
####语法
const关键字用于声明常量const [(] 名称 [数据类型] = 表达式 [)] const ( 多个常量名称 [数据类型]= 对应的多个表达式 )
如果定义多行常量而表达式一致时可省略其他行的表达式
声明时如果不指定数据类型，则该常量为无类型常量
const Pi = 3.14159265358 //float64 Pi=3.1415 编译错误: cannot assign to Pi, 变量名Pi已经被使用这里是无法再次给Pi赋值的
const a, b, c = 1, false, &amp;#34;str&amp;#34; //多重赋值 一次可以声明多个常量，且同时赋值，其类型可以不一致
const d = 1 &amp;lt;&amp;lt; 2 //需计算的表达式 复制可以是一个可以在编译期计算出结果的表达式
const ( //批量声明  Monday, Tuesday, Wednesday = 1, 2, 3 Thursday, Friday, Saturday = 4, 5, 6 ) 批量声明多个常量</description>
    </item>
    
    <item>
      <title>老虞学Golang-数组和切片</title>
      <link>https://yushuangqi.com/blog/2013/ysqi-golang-array-slice.html.html</link>
      <pubDate>Thu, 04 Apr 2013 00:00:00 +0000</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2013/ysqi-golang-array-slice.html.html</guid>
      <description>数组 Arrays 数组是内置(build-in)类型,是一组同类型数据的集合，它是值类型，通过从0开始的下标索引访问元素值。在初始化后长度是固定的，无法修改其长度。当作为方法的入参传入时将复制一份数组而不是引用同一指针。数组的长度也是其类型的一部分，通过内置函数len(array)获取其长度。
初始化 数组的初始化有多种形式,查看示例代码 , 在线运行示例代码
 [5] int {1,2,3,4,5} 长度为5的数组，其元素值依次为：1，2，3，4，5 [5] int {1,2} 长度为5的数组，其元素值依次为：1，2，0，0，0 。在初始化时没有指定初值的元素将会赋值为其元素类型int的默认值0,string的默认值是&amp;rdquo;&amp;rdquo; [...] int {1,2,3,4,5} 长度为5的数组，其长度是根据初始化时指定的元素个数决定的 [5] int { 2:1,3:2,4:3} 长度为5的数组，key:value,其元素值依次为：0，0，1，2，3。在初始化时指定了2，3，4索引中对应的值：1，2，3 [...] int {2:1,4:3} 长度为5的数组，起元素值依次为：0，0，1，0，3。由于指定了最大索引4对应的值3，根据初始化的元素个数确定其长度为5  赋值与使用 数组通过下标访问元素，可修改其元素值
arr :=[...] int {1,2,3,4,5} arr[4]=arr[1]+len(arr) //arr[4]=2+5 通过for遍历数组元素,查看示例代码,在线运行示例代码
arr := [5]int{5, 4, 3} for index, value := range arr { fmt.Printf(&amp;#34;arr[%d]=%d \n&amp;#34;, index, value) } for index := 0; index &amp;lt; len(arr); index++ { fmt.Printf(&amp;#34;arr[%d]=%d \n&amp;#34;, index, arr[index]) } 数组是值类型，将一个数组赋值给另一个数组时将复制一份新的元素,查看示例代码,在线运行示例代码</description>
    </item>
    
    <item>
      <title>老虞学golang-变量声明与初始化</title>
      <link>https://yushuangqi.com/blog/2013/ysqi-golang-var-init.html.html</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2013/ysqi-golang-var-init.html.html</guid>
      <description>变量声明  官方doc: http://golang.org//spec#Variable_declarations
 Go中使用全新的关键字var来声明变量。var我们并不陌生，在Javascript 和C#中均有出现。不同的是Go和C#中变量属于强类型，在声明变量后就不允许改变其数据类型。
声明变量有多种形态:
var a int //声明一个int类型的变量  var b struct { //声明一个结构体  name string } var a = 8 //声明变量的同时赋值，编译器自动推导其数据类型 var a int = 8 //声明变量的同时赋值  var { //批量声明变量，简洁  a int b string } 变量初始化 变量的初始化工作可以在声明变量时进行初始化，也可以先声明后初始化。此时var关键字不再是必须的。
初始化变量有多种方式，每种方式有不同的使用场景：
在方法中声明一个临时变量并赋初值
var tmpStr = “” var tmpStr string = “” tmpStr :=”” 全局中已声明变量直接赋值
tmpStr = “&amp;lt;body&amp;gt;” 我们看到有此两种方式：
var name [type] = value
如果不书写 type ,则在编译时会根据value自动推导其类型。</description>
    </item>
    
    <item>
      <title>老虞学Golang-代码规范</title>
      <link>https://yushuangqi.com/blog/2013/ysqi-golang-code-formate.html.html</link>
      <pubDate>Tue, 02 Apr 2013 00:00:00 +0000</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2013/ysqi-golang-code-formate.html.html</guid>
      <description>&lt;p&gt;开始一项新语言前需要先了解该语言的语法(如果你有其他语言的编程知识的话)，开始学习前，我们一起了解下Go的格式。
如果大家都统一编码风格，那么在维护他人代码时就能带来便利。同时我们在提交代码前执行一次fmt命令，以便提交统一风格的代码。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>老虞学GoLang-为什么会学习goLang</title>
      <link>https://yushuangqi.com/blog/2013/ysqi-why_studay_golang.html.html</link>
      <pubDate>Mon, 01 Apr 2013 00:00:00 +0000</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2013/ysqi-why_studay_golang.html.html</guid>
      <description>2009年开始接触软件开发，一直深爱着它，喜爱淘腾些新技术新技能，却至今没有所成。也许专心才能做好一些事，2013年初接触Go Lang,感受着这门语言带来的魅力，自己该在这条路上留下足迹，以此见证自己的成长历程。
为什么会学习Go Lang  编程本身是一门艺术，Go Lang 有着无尽想象的魅力。
 Gmail, Google Search, Google Translate,YouTube 这些已成为我生活工作不可缺少的一部分，足够证明Google的产品是优秀的，同样Go Lang也是优秀的，事实证明确实如此。
 golang是开源项目，它的社区时活跃的，它的创造者是行业Big牛。
 golang被创造的目的是明确的：提高开发人员的编程效率，构建服务器软件&amp;hellip;&amp;hellip;
  一段摘录 http://wiki.ubuntu.org.cn/Golang
简介
Go语言是由Google开发的一个开源项目，目的之一为了提高开发人员的编程效率。 Go语言语法灵活、简洁、清晰、高效。它对的并发特性可以方便地用于多核处理器 和网络开发，同时灵活新颖的类型系统可以方便地编写模块化的系统。go可以快速编译， 同时具有垃圾内存自动回收功能，并且还支持运行时反射。Go是一个高效、静态类型， 但是又具有解释语言的动态类型特征的系统级语法。
应用
　由于Go尚未成熟，因此谷歌旗下各类面向用户的服务或应用都没有采用该语言。正因如此，谷歌才需要外部编程人员的协助。 通过创建新的编程语言，谷歌将继续拓展计算领域的各个方面，从而促进这些领域的发展。这同样也是谷歌开发Android操作系统、Chrome浏览器和Chrome OS的动机所在。 北京时间2010年1月10日，Go语言摘得了TIOBE公布的2009年年度大奖。该奖项授予在2009年市场份额增长最多的编程语言。
功能
Google对Go寄予厚望。其设计是让软件充分发挥多核心处理器同步多工的优点，并可解决若干物件取向程序设计的麻烦。它具有现代的程序语言特色，如垃圾回收，帮助程序设计师处理琐碎但重要的内存管理问题。Go的速度也非常快，几乎和C或C++程序一样快，且能够快速制作程序。 Go的网站就是用Go所建立，但Google有更大的野心。该软件是专为构建服务器软件所设计（如Google的Gmail）。Google认为Go还可应用到其他领域，包括在浏览器内执行软件，取代目前JavaScript的角色。 {% blockquote Pike %} 它至少在强度上比JavaScript高一级。Google自建Chrome浏览器，部分原因就是加速JavaScript和网页表现，而Google已经融合了本身的技术，如Native Client和Gears. {% endblockquote %}
Pike表示，Go另一项与网络相关的特色，是服务器和用户端设备，如PC或手机，可以分担工作。因此，使用Go的服务便可轻松适应不同的用户端处理性能。Go也可解决目前的一大挑战：多核心处理器。一般电脑程序通常依序执行，一次进行一项工作，但多核心处理器更适合同步处理许多工作。Pike说：我们自认有足够的支持，可改善这方面的问题。 Go团队正在寻求帮助。其中一个重要领域是改善Go能够使用的runtime library。这类library可提供许多工具和功能，加快程序设计的过程。而Go的library还包括许多重要的设计元素，并供应处理同作、垃圾收集和其他低层杂务的资源。 Go团队也需要编译器方面的协助。Thompson曾为32位元和64位元x86处理器，及ARM处理器写过一些编译器，Taylor也为GCC编译器写过一个Go前端。 尽管Google对Go有很大的野心，该公司也明白，这项计划无法完全取代现有的技术。Pike说：我不认为我们能取代任何东西。我们只是创造出这个领域的另一个角色。
特点
　简洁 快速 安全 并行 有趣 开源 支持泛型编程，内存管理，数组安全，编译迅速
go语言的开发团队
　Thompson：1983年图灵奖（Turing Award）和1998年美国国家技术奖（National Medal of Technology）得主。他与Dennis Ritchie是Unix的原创者。Thompson也发明了后来衍生出C语言的B程序语言。</description>
    </item>
    
  </channel>
</rss>