<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虞双齐Golang开发</title>
    <link>https://yushuangqi.com/tags/%E6%96%B0%E6%89%8B.xml</link>
    <description>在 虞双齐Golang开发上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/%E6%96%B0%E6%89%8B.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go语言从新手到大神:每个人都会踩的五十个坑(1-12)</title>
      <link>https://yushuangqi.com/blog/2016/go-yu-yan-cong-xin-shou-dao-da-shen-mei-ge-ren-dou-hui-cai-de-wu-shi-ge-keng--1-12.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:29 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/go-yu-yan-cong-xin-shou-dao-da-shen-mei-ge-ren-dou-hui-cai-de-wu-shi-ge-keng--1-12.html</guid>
      <description>本文翻译自最近各种 Go 语言社区分享的很多的英文文档 50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs，小编第一眼以为 50 Shades of Grey……
Go语言是一个简单却蕴含深意的语言。但是，即便号称是最简单的C语言，都能总结出一本《C陷阱与缺陷》，更何况Go语言呢。Go语言中的许多坑其实并不是因为Go自身的问题。一些错误你再别的语言中也会犯，例如作用域，一些错误就是对因为 Go 语言的特性不了解而导致的，例如 range。
其实如果你在学习Go语言的时候去认真地阅读官方文档，百科，邮件列表或者其他的类似 Rob Pike 的名人博客，报告，那么本文中提到的许多坑都可以避免。但是不是每个人都会从基础学起，例如译者就喜欢简单粗暴地直接用Go语言写程序。如果你也像译者一样，那么你应该读一下这篇文章：这样可以避免在调试程序时浪费过多时间。
本文将50个坑按照使用使用范围和难易程度分为以下三个级别：“新手入门级”，“新手深入级”，“新手进阶级”。
“{”不能单独放在一行 级别：新手入门级
Go语言设计者肯定和C语言设计者(K&amp;amp;R)有种不明不白的关系，因为C语言中的K&amp;amp;R格式在Go语言中得到发扬光大。大多数语言中，大括号中的左括号是可以随便放在哪里的：C语言中必须要按照K&amp;amp;R格式对代码进行格式化之后，左括号才会被放在前一行中的最后。但是Go语言中，左括号必须强制不能单独放在一行。这个规则得益于“自动分号注射”（automatic semicolon injection）。
补充：go提供了专门用于格式化代码的gofmt工具。
出错代码：
package main import &amp;quot;fmt&amp;quot; func main() { //error, can&#39;t have the opening brace on a separate line fmt.Println(&amp;quot;hello there!&amp;quot;) }  错误信息:
/tmp/sandbox826898458/main.go:6: syntax error: unexpected semicolon or newline before {  修正代码:</description>
    </item>
    
    <item>
      <title>Go语言从新手到大神:每个人都会踩的五十个坑(13-22)</title>
      <link>https://yushuangqi.com/blog/2016/go-yu-yan-cong-xin-shou-dao-da-shen-mei-ge-ren-dou-hui-cai-de-wu-shi-ge-keng--13-22.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:29 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/go-yu-yan-cong-xin-shou-dao-da-shen-mei-ge-ren-dou-hui-cai-de-wu-shi-ge-keng--13-22.html</guid>
      <description>https://segmentfault.com/a/
Slice 和 Array 维度是一维 级别：新手入门级
Go 看上去支持多维的 Array 和 Slice，但是其实不然。尽管可以创建 Array 的 Array，也可以创建 Slice 的 Slice。对于依赖多维 Array 的计算密集型的程序，无论是从性能还是复杂程度，Go 都不是最佳选择。
当然，如果你选择创建嵌套的 Array 与嵌套的 Slice，那么你就得自己负责进行索引、进行下表检查、以及 Array 增长时的内存分配。嵌套 Slice 分为两种，Slice 中嵌套独立的 Slice，或者 Slice 中嵌套共享数据的 Slice。
使用嵌套的独立 Slice 创建多维的 Array 需要两步。第一步，创建外围 Slice，然后分配每个内部的 Slice。内部的 Slice 是独立的，可以对每个单独的内部 Slice 进行缩放。
package main func main() { x := 2 y := 4 table := make([][]int,x) for i:= range table { table[i] = make([]int,y) } }  使用嵌套、共享数据的 Slice 创建多维 Array 需要三步。第一，创建数据“容器”，第二部，创建外围 Slice，第三部，对内部的 Slice 进行初始化。</description>
    </item>
    
  </channel>
</rss>