<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on 虞双齐的博客</title>
    <link>https://yushuangqi.com/tags/shell.html</link>
    <description>在 虞双齐的博客上关于in Shell 的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>ysqi@yushuangqi.com (虞双齐)</managingEditor>
    <webMaster>ysqi@yushuangqi.com (虞双齐)</webMaster>
    <lastBuildDate>Sat, 31 Dec 2016 11:34:01 +0800</lastBuildDate>
    <atom:link href="/tags/shell.html" rel="self" type="application/rss+xml" />
    
    <item>
      <title>centos7下安装go语言</title>
      <link>https://yushuangqi.com/blog/2016/centos-7-xia--an-zhuang-goyu-yan.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:01 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/centos-7-xia--an-zhuang-goyu-yan.html</guid>
      <description>1.下载 并且 安装 Go安装包
百度网盘上传了最新GO版本，供大家下载：http://pan.baidu.com/s/1bjg9zg
===========================================================
在/usr/local下安装程序
$ tar -xzf go1.5.2.linux-xxx.tar.gz -C /usr/local  在/etc/profile中添加系统范围的PATH环境变量。
$ vi /etc/profile  export PATH=\$PATH:/usr/local/go/bin
如果你在/usr/local之外的自定义位置中安装了Go，你同样需要设置GOROOT环境变量来指向自定义的安装位置。
$ vi /etc/profile  export GOPATH=/root/wwwgo
export GOROOT=/usr/local/go
刷新环境变量
$ source /etc/profile  检查Go语言的版本
$ go version  go version go1.5.2 linux/amd64</description>
    </item>
    
    <item>
      <title>beego自动化部署</title>
      <link>https://yushuangqi.com/blog/2016/beegozi-dong-hua-bu-shu.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:34 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/beegozi-dong-hua-bu-shu.html</guid>
      <description>beego是Golang写的应用程序开源框架http://beego.me/，我使用beego写了一个项目小项目，golang是编译语言，需要编译之后再部署，每次部署到服务上是件很麻烦的事情。就写了一个自动打包部署到服务器的脚本，方便发布部署。
项目结构 先看看beego项目的结构：
beepkg |-- conf | `-- app.conf |-- controllers | `-- default.go |-- main.go |-- models |-- routers | `-- router.go |-- static | |-- css | |-- img | `-- js |-- tests | `-- default_test.go `-- views `-- index.tpl  其中controllers，views.models以及其他的.go文件会被打包成可执行文件beepkg。
而静态文件static以及conf文件不会被编译，需要打包上传部署到服务器上。
因此在打包文件的时候需要忽略一些文件：
1.go文件，已经编译成可执行文件 2.本地生成的一些临时文件 3.项目的一些配置文件  因此我们在使用bee pack打包的时候需要忽略这些文件，bee pack在编译之后压缩的的时候会默认忽略这三种文件:.go:.DS_Store:.tmp。因此我们只需要忽略其他的文件即可。
使用命令-exr用正则表达式忽略文件：
 bee pack -be GOOS=linux -ba -exr=&amp;rsquo;\^[0-9a-f]|[*.iml]\$&amp;rsquo;
 因为使用了文件存储的session，本地目录下会生成session的文件夹需要忽略打包[0-9a-f],[*.iml]是IntelliJ生成的项目配置文件,在打包的时候需要忽略这些文件。
打包脚本 打包beego项目，同步到服务端，需要做三件事情:
1.更新代码 2.编译可执行文件，打包资源 3.同步到压缩包到服务器 4.</description>
    </item>
    
    <item>
      <title>go实现高性能直播服务</title>
      <link>https://yushuangqi.com/blog/2016/goshi-xian-gao-xing-neng-zhi-bo-fu-wu.html</link>
      <pubDate>Sat, 31 Dec 2016 11:32:47 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/goshi-xian-gao-xing-neng-zhi-bo-fu-wu.html</guid>
      <description>livego
go 实现直播服务
服务器部署
chmod 755 server.sh
./server.sh &amp;amp;（依赖go环境，有些情况需要用vim 打开 set ff=unix 然后:wq）
或者直接执行 ./LiveGoServer (不依赖go环境)
本地部署
直接执行 LiveGoServer.exe
use
采用vue+webpack实现ui
所有在config里
日志在logs里
http://localhost:8080/ (视频直播)
http://localhost:8080/camera (录视频)(由于chrome的安全限制，建议在firefox下打开录视频页面)
使用效果
交流使用
交流群：337937322
项目地址：[](https://github.com/qieangel2013/livego)[https://github.com/qieangel20...](https://github.com/qieangel2013/livego)</description>
    </item>
    
    <item>
      <title>Liunx查找删除历史备份文件批命令</title>
      <link>https://yushuangqi.com/blog/2016/liunx%E6%9F%A5%E6%89%BE%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E6%89%B9%E5%91%BD%E4%BB%A4.html</link>
      <pubDate>Mon, 15 Feb 2016 13:06:32 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/liunx%E6%9F%A5%E6%89%BE%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E6%89%B9%E5%91%BD%E4%BB%A4.html</guid>
      <description>NAS作为数据备份中心，但需要经常清理历史备份文件，仅需要保留一部分备份文件即可。由于NAS是改造后的Liunx 操作系统，故有些命令无法直接执行，因此独立写了一个脚本来搜索历史备份文件，并记录待删除文件信息，自动生成脚本删除文件。
Liunx查找删除历史备份文件批命令脚本 具体执行脚本如下：
#!/bin/bash  NOW=$(date +&amp;#34;%Y%m%d%M%S&amp;#34;) FILE=&amp;#34;NeedDeleteFile_$NOW.sh&amp;#34; # 遍历文件，写入文件中 function findFile(){ # 记录查找目录 	echo &amp;#34;# find from $1-mtime $2&amp;#34; &amp;gt;&amp;gt; $FILE #遍历目录，将指定日期的  find $1 -mtime $2 -type f \( -iname &amp;#34;*.bak&amp;#34; -o -iname &amp;#34;*.log&amp;#34; -o -iname &amp;#34;*.zip&amp;#34; -o -iname &amp;#34;*.rar&amp;#34; \) -print0 | while IFS= read -r -d $&amp;#39;\0&amp;#39; line; do echo &amp;#34;rm \&amp;#34;$line\&amp;#34;;&amp;#34; &amp;gt;&amp;gt; $FILE done } # 标记sh文件 echo &amp;#34;#!/bin/bash&amp;#34; &amp;gt;&amp;gt; $FILE # 记录创建日期 echo &amp;#34;# $NOWcreate file.</description>
    </item>
    
    <item>
      <title>如何按多个文件名查找文件</title>
      <link>https://yushuangqi.com/blog/2016/linux-find-multiple-filenames-patterns-command-example.html</link>
      <pubDate>Mon, 15 Feb 2016 12:44:59 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/linux-find-multiple-filenames-patterns-command-example.html</guid>
      <description>一个问题是如何在 Liunx 下按多个文件名或者文件后缀查找文件。例如，我想要查找当前项目下所有的 .go 和 .md 文件。
此时，你可以使用 Liunx 命令 find ，命名具体用法参见gnu 文档。 使用 find 命令能够通过选项-o ( or 的意思) 来按多个条件查找文件。
示例：按两个文件名查找文件 我们想查找当前命令目录下的 .go 和 .md 文件。
find . -type f \( -iname &amp;#34;*.go&amp;#34; -o -iname &amp;#34;*.md&amp;#34; \) 这里的.表示在当前文件夹下查找文件， -type 要查找的文件类型，f表示文件，用-type d表示查找文件夹。 -iname 是 -name 的另一个写法，表示忽略大小写匹配文件名。-o 是 or 或者的意思。 这里，我们使用带转义符的括号来包含两个 or 条件。
示例：按三个文件名查找文件 同理，可以添加N多个文件名查找文件。
find . -type f \( -iname &amp;#34;*.txt&amp;#34; -o -iname &amp;#34;*.exe&amp;#34; -o -iname &amp;#34;*.log&amp;#34; \) 总结 上面就是在 Liunx 下如何按多个文件名查找文件的用法，简单明了。liunx find 命令能方便按多个文件名查找文件。可以点击阅读Liunx查找删除历史备份文件批命令来了解具体业务场景用途。</description>
    </item>
    
  </channel>
</rss>