<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虞双齐Golang开发</title>
    <link>https://yushuangqi.com/tags/docker.xml</link>
    <description>在 虞双齐Golang开发上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/docker.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>创建尽可能小的Docker容器</title>
      <link>https://yushuangqi.com/blog/2016/chuang-jian-jin-ke-neng-xiao-de--docker-rong-qi.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:48 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/chuang-jian-jin-ke-neng-xiao-de--docker-rong-qi.html</guid>
      <description>注：本文由 Adriaan de Jonge 编写，本文的原文地址为 Create The Smallest Possible Docker Container
 当我们在使用 Docker 的时候，你会很快注意到你正在下载很多 MB 作为你的预先配置的容器。一个简单的 Ubuntu 容器很容易超过 200 MB，并且随着在上面安装软件，尺寸在逐渐增大。在某些情况下，你不需要任何事情都使用 Ubuntu 。例如，如果你只是简单的想运行一个 web 服务，使用 GO 编写的，没有必要围绕它使用任何工具。
我一直在寻找尽可能小的容器入手，并且发现了一个：
docker pull scratch  scratch 镜像是完美的，真正的完美！它简洁，小巧以及快速。它不包含任何 bug，安全泄漏，慢的代码或是技术债务。这是因为它是一个空的镜像。除了一点由 Docker 加入的元数据。事实上，你可以使用如下命令按照 Docker 文档描述的那样创建一个自己的 scratch 镜像。
tar cv --files-from /dev/null | docker import - scratch  所以这可能就是最小的 Docker 镜像。
或者我们可以说说关于这个的更多东西？比如，你怎样使用 scratch 镜像。这给自己带来了一些挑战。
为 scratch 镜像创建内容 我们可以在一个空镜像中运行什么？一个没有依赖的可执行程序。你是否有没有依赖的可执行程序？
我过去常常使用 Python，Java 和 Javascript 编写代码。每一个这样的语言/平台都需要一个运行时的安装。最近，我开始涉及 Go（或是 golang 如果你喜欢）平台。看起来 Go 是静态连接的。因此我尝试编译一个简单的 web 服务输出 Hello World 并且运行在 scratch 容器中。下面是这个 Hello World web 服务的代码：</description>
    </item>
    
    <item>
      <title>使用Etcd和Haproxy做Docker服务发现</title>
      <link>https://yushuangqi.com/blog/2016/shi-yong--etcd-he--haproxy-zuo--docker-fu-wu-fa-xian.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:39 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/shi-yong--etcd-he--haproxy-zuo--docker-fu-wu-fa-xian.html</guid>
      <description>使用 Etcd 和 Haproxy 做 Docker 服务发现 标签（空格分隔）： Etcd Haproxy Docker 服务发现 architecture discovery docker-gen golang service
 本文作者是 jwilder，本文的原文是 Docker Service Discovery Using Etcd and Haproxy
 在前一篇文章中，我们展示了一种为 Docker 容器在同一台主机上创建一个自动化 Nginx 反向代理的方式。那个设置对于前端 web app 来说工作的很好，但是对于后端服务来说它不是一个好的点子，因为通常它们跨越多个主机。
这篇文章描述了一个为后端服务的 Docker 容器提供服务发现的解决方案。
我们将构建的架构体系是模仿 SmartStack，但是使用 etcd 代替 Zookeeper，和两个 docker 容器运行 docker-gen 和 haproxy 代替 nerve 和 synapse。
它怎样工作的 类似于 SmartStack，我们的组件服务作为一个注册（etcd），一个注册伙伴进程（docker-register），发现伙伴进程（docker-discover），一些后端服务（whoami）以及最后一个消费者（ubuntu/curl）。
注册和发现组件作为设备与应用程序容器工作，因此在后端或消费者容器的注册或发现代码不是被嵌入的。它们仅仅监听端口或连接其他本地端口。
服务注册 - Etcd 在任何事情被注册之前，我们需要一些地方跟踪注册条目（比如，服务的 IP 和端口）。我们使用 etcd，因为它由服务注册的简单程序模型和支持键的 TTLs 以及目录。
通常，你将运行 3到5个 etcd 节点，但是我们仅仅使用一个来保持事情简化。</description>
    </item>
    
    <item>
      <title>通过Mesos、Docker和Go使用300行代码创建一个分布式系统</title>
      <link>https://yushuangqi.com/blog/2016/tong-guo--mesosdocker-he--goshi-yong--300-hang-dai-ma-chuang-jian-yi-ge-fen-bu-shi-ji-tong.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:23 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/tong-guo--mesosdocker-he--goshi-yong--300-hang-dai-ma-chuang-jian-yi-ge-fen-bu-shi-ji-tong.html</guid>
      <description>【摘要】虽然 Docker 和 Mesos 已成为不折不扣的 Buzzwords ，但是对于大部分人来说它们仍然是陌生的，下面我们就一起领略 Mesos 、Docker 和 Go 配合带来的强大破坏力，如何通过 300 行代码打造一个比特币开采系统。
时下，对于大部分 IT 玩家来说， Docker 和 Mesos 都是熟悉和陌生的：熟悉在于这两个词无疑已成为大家讨论的焦点，而陌生在于这两个技术并未在生产环境得到广泛使用，因此很多人仍然不知道它们究竟有什么优势，或者能干什么。近日， John Walter 在 Dzone 上撰文 Creating a Distributed System in 300 Lines With Mesos, Docker, and Go，讲述了 Mesos、Docker 和 Go 配合带来的强大破坏力，本文由 OneAPM 工程师编译整理。
诚然，构建一个分布式系统是很困难的，它需要可扩展性、容错性、高可用性、一致性、可伸缩以及高效。为了达到这些目的，分布式系统需要很多复杂的组件以一种复杂的方式协同工作。例如，Apache Hadoop 在大型集群上并行处理 TB 级别的数据集时，需要依赖有着高容错的文件系统（ HDFS ）来达到高吞吐量。
在之前，每一个新的分布式系统，例如 Hadoop 和 Cassandra ，都需要构建自己的底层架构，包括消息处理、存储、网络、容错性和可伸缩性。庆幸的是，像 Apache Mesos 这样的系统，通过给分布式系统的关键构建模块提供类似操作系统的管理服务，简化了构建和管理分布式系统的任务。Mesos 抽离了 CPU 、存储和其它计算资源，因此开发者开发分布式应用程序时能够将整个数据中心集群当做一台巨型机对待。
构建在 Mesos 上的应用程序被称为框架，它们能解决很多问题： Apache Spark，一种流行的集群式数据分析工具；Chronos ，一个类似 cron 的具有容错性的分布式 scheduler ，这是两个构建在 Mesos 上的框架的例子。构建框架可以使用多种语言，包括 C++，Go，Python，Java，Haskell 和 Scala。</description>
    </item>
    
    <item>
      <title>shipyard中文版发布</title>
      <link>https://yushuangqi.com/blog/2016/shipyardzhong-wen-ban-fa-bu.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:08 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/shipyardzhong-wen-ban-fa-bu.html</guid>
      <description> shipyard中文版正式发布  一、 Docker Shipyard是什么 ？shipyard是一个开源的docker管理平台，其特性主要包括：
 支持节点动态集群，可扩展节点的规模（swarm、etcd方案）
 支持镜像管理、容器管理、节点管理等功能
 可视化的容器管理和监控管理
 在线容器console终端
  二、 Shipyard中文版源代码托管在github，有兴趣可以访问git获取代码。下面是一些图片的预览：
  1.登陆界面 2.容器列表 3.容器信息创建 4.容器信息 5.终端连接 6.镜像信息 7.节点信息 8.仓库信息   三、 如何使用
 3.1如何安装shipyard中文版  curl http://dockerclub.net/deploy | bash -s  3.2如何删除shipyard中文版  curl http://dockerclub.net/deploy | ACTION =remove bash -s  3.2如何增加一个节点  curl -sSL http://dockerclub.net/deploy | ACTION=node DISCOVERY=etcd://&amp;lt;你的首次安装主机IP&amp;gt; bash -s bash -s  </description>
    </item>
    
    <item>
      <title>shipyard研发系列(1)-shipyard安装指南</title>
      <link>https://yushuangqi.com/blog/2016/shipyardyan-fa-ji-lie-1-shipyardan-zhuang-zhi-na.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:08 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/shipyardyan-fa-ji-lie-1-shipyardan-zhuang-zhi-na.html</guid>
      <description>Docker之shipyard安装指南  一、前言：最近在研究shipyard的docker容器管理平台，在研究过程发现自己对docker基础理解还存在一定的欠缺，为了更好的理解docker，将我对shipyard项目的理解共享给docker爱好者，也系统的形成一份研发日志。dockerclub的shipyard研发系列详细请访问
二、shipyard项目介绍：shipyard是一个集成管理docker容器、镜像、Registries的系统，他最大亮点应该是支持多节点的集成管理，可以动态加载节点，可托管node下的容器。这里暂时不对shipyard的细节讲解，后续章节会讲他的架构。
三、shipyard安装使用介绍，shipyard项目的安装可以参考官网逐步操作，这里补充一些坑的解决过程。
 3.1 首次部署脚本 curl -sSL https://shipyard-project.com/deploy | bash -s   ACTION: 可以使用的指令 (deploy, upgrade, node, remove)
 DISCOVERY: 集群系统采用Swarm进行采集和管理(在节点管理中可以使用‘node’)
 IMAGE: 镜像，默认使用shipyard的镜像
 PREFIX: 容器名字的前缀
 SHIPYARD_ARGS: 容器的常用参数
 TLS_CERT_PATH: TLS证书路径
 PORT: 主程序监听端口 (默认端口: 8080)
 PROXY_PORT: 代理端口 (默认: 2375)
   3.2 脚本可选项  如果你要自定义部署，请参考以下规范
 部署action：指令有效变量
 deploy: 部署新的shipyard实例
 upgrade: 更新已存在的实例（注意：你要保持相同的系统环境、变量来部署同样的配置）
 node: 使用Swarm增加一个新的node
 remove: 删除已存在的shipyard实例（容器）
   3.</description>
    </item>
    
    <item>
      <title>shipyard中文版v3_0_2更新</title>
      <link>https://yushuangqi.com/blog/2016/shipyardzhong-wen-ban-v3_0_2geng-xin.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:56 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/shipyardzhong-wen-ban-v3_0_2geng-xin.html</guid>
      <description>Shipyard中文版官方同步更新
 中文版shipyard v3.0.2与官方同步更新，更新内容详细可见GITHUB:https://github.com/dockerclubgroup/shipyard
 本次更新内容包括
1、不列出中间镜像列表
  2、修复docker 1.2.1版本以上的网络状态与链接Bug
3、修复多个容器部署bug
4、golang依赖库更新，迁移google依赖至github
5、支持多网络模式的部署
欢迎大家体验新版本的镜像，镜像地址hub:https://hub.docker.com/r/dockerclub/shipyard/</description>
    </item>
    
  </channel>
</rss>