<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>类型转换 on 虞双齐的博客</title>
    <link>https://yushuangqi.com/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html</link>
    <description>在 虞双齐的博客上关于in 类型转换 的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>ysqi@yushuangqi.com (虞双齐)</managingEditor>
    <webMaster>ysqi@yushuangqi.com (虞双齐)</webMaster>
    <lastBuildDate>Sat, 31 Dec 2016 11:34:41 +0800</lastBuildDate>
    <atom:link href="/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html" rel="self" type="application/rss+xml" />
    
    <item>
      <title>golang的类型转换的坑和分析</title>
      <link>https://yushuangqi.com/blog/2016/golangde-lei-xing-zhuai-huan-de-keng-he-fen-xi.html.html</link>
      <pubDate>Sat, 31 Dec 2016 11:34:41 +0800</pubDate>
      <author>ysqi@yushuangqi.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/golangde-lei-xing-zhuai-huan-de-keng-he-fen-xi.html.html</guid>
      <description>首先，我们来看一个例子
type Stringer interface { String() string } type String struct { data string } func (s *String) String() string { return s.data }  上面是类型，然后
func GetString() *String { return nil } func CheckString(s Stringer) bool { return s == nil } func main() { println(CheckString(GetString())) }  你们猜答案是什么？
当然，这么诡异的提问方式一看答案就是不合常理的false。
在CheckString里面，s是不等于nil的。
如果你觉得不可思议，那么可以继续看下去了。
需要强调的是，本篇文章仅仅适用于golang。
类型转换 官方文档明确说明了怎么判断类型T是否可以转换成V，正常来说，T要转换成V必需显式声明。
func check64(v int64){} func check(v int){} a := 5 b := int64(10) check64(int64(a)) check(int(b)) check64(a) // panic  不过，如果在满足Assignability的情况下，就可以在没有显式声明的情况下自动进行类型转换</description>
    </item>
    
  </channel>
</rss>