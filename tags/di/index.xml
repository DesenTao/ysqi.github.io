<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虞双齐Go语言技术独立咨询顾问</title>
    <link>https://yushuangqi.com/tags/di.xml</link>
    <description>在 虞双齐Go语言技术独立咨询顾问上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/di.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Baa框架中的依赖注入(DI)是个什么鬼？</title>
      <link>https://yushuangqi.com/blog/2016/baakuang-jia-zhong-de-yi-lai-zhu-ru-dishi-ge-shen-me-gui-.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:28 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/baakuang-jia-zhong-de-yi-lai-zhu-ru-dishi-ge-shen-me-gui-.html</guid>
      <description>我最早接触的Go WEB框架是beego，很强大的一个框架，也是很多人的首选，就是因为太（bu）强（gou）大（ling）了(huo)，后来尝试了Macaron（martini）。Macaron的设计是众多框架的主流思想，路由、中间件、HTTP上下文，然后自己实现了一些常用的中间件（PS. 有一些中间件代码来自beego）。Macaron的思想中，可以通过m.Map()注入任意类型，然后在Context中通过反射获取这个类型，初试很爽，并为他的设计称赞。
在用PHP的时候有个框架 Phalcon他的设计中核心是 Dependency Injection/Service Location，看起来很复杂，简单来说就是把类似log,db,cache,metadata等服务注册到DI中，使用的时候从DI取出来。Phalcon的使用姿势中就是先初始化一个APP，然后各种注册DI，然后RUN，伪代码如下：
&amp;lt;?php $di = new \Phalcon\DI\FactoryDefault(); $di-&amp;gt;set(&#39;router&#39;, new MyRouter()); $di-&amp;gt;set(&#39;logger&#39;, function () { return new LoggerFile(&#39;../apps/logs/error.log&#39;); }); $di-&amp;gt;set(&#39;db&#39;, function () { return new PdoMysql( array( &amp;quot;host&amp;quot; =&amp;gt; &amp;quot;localhost&amp;quot;, &amp;quot;username&amp;quot; =&amp;gt; &amp;quot;root&amp;quot;, &amp;quot;password&amp;quot; =&amp;gt; &amp;quot;secret&amp;quot;, &amp;quot;dbname&amp;quot; =&amp;gt; &amp;quot;blog&amp;quot; ) ); }); $di-&amp;gt;set(&#39;db2&#39;, ...); $di-&amp;gt;set(&#39;mongo&#39;, new \MongoClient()); // Create an application $application = new \Phalcon\Mvc\Application($di); // Handle the request echo $application-&amp;gt;handle()-&amp;gt;getContent();  上面的初始化，就是各种set，当然他支持set的类型比较丰富，还支持lazyload等，使用的方式也比较简单：
&amp;lt;?php $di = new \Phalcon\DI\FactoryDefault(); $db = $di-&amp;gt;get(&#39;db&#39;); $mongo = $di-&amp;gt;get(&#39;mongo&#39;); $mongo-&amp;gt;selectCollection(&#39;xxx&#39;);  总结下来，就是 set/get，set就是设置一个服务（注入），get就是取出这个服务来使用，当然php不像Go是静态语言，他不需要做类型断言。</description>
    </item>
    
  </channel>
</rss>