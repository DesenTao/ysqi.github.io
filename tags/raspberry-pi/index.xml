<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>虞双齐Golang开发与SRE运维</title>
    <link>https://yushuangqi.com/tags/raspberry-pi.xml</link>
    <description>在 虞双齐Golang开发与SRE运维上关于的内容</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>devysq@gmail.com (虞双齐)</managingEditor>
    <webMaster>devysq@gmail.com (虞双齐)</webMaster>
    <atom:link href="/tags/raspberry-pi.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>树莓派上编译Goand安装Cow</title>
      <link>https://yushuangqi.com/blog/2016/shu-mei-pa-shang-bian-yi--go-and-an-zhuang--cow.html</link>
      <pubDate>Sat, 31 Dec 2016 11:35:02 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/shu-mei-pa-shang-bian-yi--go-and-an-zhuang--cow.html</guid>
      <description>PS:老Blog文章转移, 年代久远, 连接可能已失效.
Cow 是不错的软件，相当好用，我在公司是直接把它挂到了服务器上，然后办公室的人都在用它。但是回到了家里我就无法用移动设备或者 PSP 之类的连接它了，我的电脑也不能一天 24 小时的在家中开机，碰巧这两天买了连个树莓派，上面运行的是专门定制过的 Debian Linux，我就想着是否能够使用它来运行 Cow。十分不幸的是，似乎作者的网站上并没有提供 ARM 设备的 Cow 版本，我尝试的下载了 Linux 32 位的版本，但是无法在树莓派上运行。所幸 Cow 是用 Go 语言写的，而 Go 支持 ARM，大不了自己编译 Cow。
我不知道是因为我的的问题还是因为什么奇怪的问题，树莓派的官方源里有 Golang，但是我安装之后却无法使用。So，干脆连 Go 也自己编译好了。
先安装依赖包：
sudo apt-get install -y mercurial gcc libc6-dev
然后用 Mercurial 拖回 Go 的源码：
hg clone -u default https://code.google.com/p/go $HOME/go
然后开始编译:
cd $HOME/go/src ./all.bash
这一步非常非常非常漫长，我估计我等了能有七八十分钟。等待漫长的编译结束后，我们还需要设置一下环境变量，在.zshrc或.bashrc下加入export PATH=$PATH:$HOME/go/bin。然后重启 Shell 环境，执行一下go version命令，如果出现正确的版本号信息，就表示一切都 OK 了。如果你准备马上开始编译 Cow，还需要设置一下gopath，在.zshrc或.bashrc中加入export GOPATH=$HOME/mygo，然后执行go get github.com/cyfdecyf/cow命令开始拖回 Cow 的源码并编译。
又是一阵漫长的等待，之后 Cow 的可执行文件会出现在\$HOME/mygo/bin/目录之中，最后附我所编译好了的 Go for Raspberry pi 与 Cow for Raspberry pi 下载地址与 Cow 项目主页：</description>
    </item>
    
    <item>
      <title>RaspberryPiwithGolang</title>
      <link>https://yushuangqi.com/blog/2016/raspberry-pi-with-go-lang.html</link>
      <pubDate>Sat, 31 Dec 2016 11:33:58 +0800</pubDate>
      <author>devysq@gmail.com (虞双齐)</author>
      <guid>https://yushuangqi.com/blog/2016/raspberry-pi-with-go-lang.html</guid>
      <description>// This program achieves LED blink on Raspberry Pi with Go lang. // This is implemented with hard-coding and uses only main function.
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;time&amp;quot; ) func main() { // Initialize GPIO25 fmt.Println(&amp;quot;Initialize GPIO25&amp;quot;) fd, err := os.OpenFile(&amp;quot;/sys/class/gpio/export&amp;quot;, os.O_WRONLY|os.O_SYNC, 0666) if err != nil { fmt.Println(&amp;quot;open /sys/class/gpio/export fails&amp;quot;) fmt.Println(err) return } fmt.Fprint(fd, &amp;quot;25&amp;quot;) fd.Close() // Check iinitialization result fmt.Println(&amp;quot;Check initialization result&amp;quot;) _, err = os.Stat(&amp;quot;/sys/class/gpio/gpio25&amp;quot;) if err !</description>
    </item>
    
  </channel>
</rss>